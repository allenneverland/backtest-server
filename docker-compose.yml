services:
  # 開發環境
  dev:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
      - ~/.ssh:/root/.ssh:ro
    environment:
      - RUST_BACKTRACE=${RUST_BACKTRACE}
      - RUST_LOG=${RUST_LOG}
      - DATABASE_URL=postgres://${BACKTEST_DB_USER}:${BACKTEST_DB_PASSWORD}@${BACKTEST_DB_HOST}:${BACKTEST_DB_PORT}/${BACKTEST_DB_NAME}
      - MARKET_DATABASE_URL=postgres://${MARKET_DB_USER}:${MARKET_DB_PASSWORD}@${MARKET_DB_HOST}:${MARKET_DB_PORT}/${MARKET_DB_NAME}
      - REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}
    depends_on:
      - rabbitmq
      - backtest-db
      - redis
    command: >
      bash -c "
        echo '等待數據庫就緒...' &&
        sqlx migrate run --source migrations &&
        echo '遷移完成，進入開發模式' &&
        tail -f /dev/null
      "
    networks:
      - backtest_server-network
      - market_data-network

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "${RABBITMQ_PORT}:5672"    # AMQP 協議端口
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"  # 管理界面端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TimescaleDB 數據庫
    # 回測資料庫 (讀寫)
  backtest-db:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=${BACKTEST_DB_USER}
      - POSTGRES_PASSWORD=${BACKTEST_DB_PASSWORD}
      - POSTGRES_DB=${BACKTEST_DB_NAME}
    volumes:
      - backtest-db-data:/var/lib/postgresql/data
      # 掛載回測遷移目錄到容器中
      - ./migrations:/app/migrations
    ports:
      - "${BACKTEST_DB_PORT}:5432"
    networks:
      - backtest_server-network
    command: >
      -c shared_buffers=${TIMESCALEDB_SHARED_BUFFERS}
      -c max_connections=${TIMESCALEDB_MAX_CONNECTIONS}
      -c effective_cache_size=${TIMESCALEDB_EFFECTIVE_CACHE_SIZE}
      -c timescaledb.max_background_workers=${TIMESCALEDB_MAX_BACKGROUND_WORKERS}
      -c timescaledb.telemetry_level=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BACKTEST_DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis 用於緩存和消息傳遞
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    networks:
      - backtest_server-network
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  python_server:
    build:
      context: ./test-server
      dockerfile: Dockerfile.python
    ports:
      - "5000:5000"
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASSWORD}
    depends_on:
      - rabbitmq
    networks:
      - backtest_server-network

volumes:
  cargo-cache:
  target-cache:
  backtest-db-data:
  redis-data:
  rabbitmq_data:

networks:
  backtest_server-network:
    driver: bridge
  market_data-network:
    external: true
    name: marketdata-center_market_data-network