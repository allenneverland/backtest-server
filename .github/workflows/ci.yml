name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 先運行格式檢查，這個最快
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 40  # 增加到 40 分鐘
    needs: fmt  # 等待格式檢查完成
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backtest_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "ci-cache"
        workspaces: ". -> target"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev postgresql-client

    - name: Setup database
      env:
        PGPASSWORD: postgres
      run: |
        echo "Creating TimescaleDB extension..."
        psql -h localhost -U postgres -d backtest_server_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
        echo "TimescaleDB extension created successfully"
        psql -h localhost -U postgres -d backtest_server_test -c "SELECT * FROM pg_extension WHERE extname = 'timescaledb';"
    
    - name: Install sqlx-cli
      run: |
        if ! command -v sqlx &> /dev/null; then
          echo "Installing sqlx-cli from binary release..."
          curl -L https://github.com/launchbadge/sqlx/releases/download/v0.8.2/sqlx-cli-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv sqlx /usr/local/bin/
          sqlx --version
        else
          echo "sqlx-cli already installed"
        fi
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        RUST_LOG: sqlx=debug,backtest_server=debug
        PGPASSWORD: postgres
      run: |
        echo "Running migrations..."
        sqlx migrate run || (echo "Migration failed!" && exit 1)
        echo "Verifying continuous aggregates..."
        psql -h localhost -U postgres -d backtest_server_test -c "\dv" || true

    - name: Build test binaries
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
      run: |
        echo "Building test binaries at $(date)"
        cargo test --no-run --all-features
        echo "Build completed at $(date)"
        
    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
        RUST_LOG: debug
        RUST_TEST_THREADS: 2  # 限制並行測試數量
      run: |
        echo "Starting tests at $(date)"
        cargo test --all-features -- --nocapture
        echo "Tests completed at $(date)"

    - name: Run doc tests
      run: cargo test --doc

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: fmt  # 等待格式檢查完成
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backtest_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "ci-cache"
        workspaces: ". -> target"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev postgresql-client

    - name: Setup database
      env:
        PGPASSWORD: postgres
      run: |
        echo "Creating TimescaleDB extension..."
        psql -h localhost -U postgres -d backtest_server_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
        echo "TimescaleDB extension created successfully"
        psql -h localhost -U postgres -d backtest_server_test -c "SELECT * FROM pg_extension WHERE extname = 'timescaledb';"
    
    - name: Install sqlx-cli
      run: |
        if ! command -v sqlx &> /dev/null; then
          echo "Installing sqlx-cli from binary release..."
          curl -L https://github.com/launchbadge/sqlx/releases/download/v0.8.2/sqlx-cli-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv sqlx /usr/local/bin/
          sqlx --version
        else
          echo "sqlx-cli already installed"
        fi
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        RUST_LOG: sqlx=debug,backtest_server=debug
        PGPASSWORD: postgres
      run: |
        echo "Running migrations..."
        sqlx migrate run || (echo "Migration failed!" && exit 1)
        echo "Verifying continuous aggregates..."
        psql -h localhost -U postgres -d backtest_server_test -c "\dv" || true

    - name: Run clippy
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
      run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [fmt, clippy]  # 等待格式和 clippy 檢查完成
    strategy:
      matrix:
        mode: [debug, release]
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backtest_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "ci-cache-${{ matrix.mode }}"
        workspaces: ". -> target"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev postgresql-client

    - name: Setup database
      env:
        PGPASSWORD: postgres
      run: |
        echo "Creating TimescaleDB extension..."
        psql -h localhost -U postgres -d backtest_server_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
        echo "TimescaleDB extension created successfully"
        psql -h localhost -U postgres -d backtest_server_test -c "SELECT * FROM pg_extension WHERE extname = 'timescaledb';"
    
    - name: Install sqlx-cli
      run: |
        if ! command -v sqlx &> /dev/null; then
          echo "Installing sqlx-cli from binary release..."
          curl -L https://github.com/launchbadge/sqlx/releases/download/v0.8.2/sqlx-cli-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv sqlx /usr/local/bin/
          sqlx --version
        else
          echo "sqlx-cli already installed"
        fi
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        RUST_LOG: sqlx=debug,backtest_server=debug
        PGPASSWORD: postgres
      run: |
        echo "Running migrations..."
        sqlx migrate run || (echo "Migration failed!" && exit 1)
        echo "Verifying continuous aggregates..."
        psql -h localhost -U postgres -d backtest_server_test -c "\dv" || true

    - name: Build (debug)
      if: matrix.mode == 'debug'
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
      run: cargo build --all-targets

    - name: Build (release)
      if: matrix.mode == 'release'
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
      run: cargo build --release --all-targets

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test  # 等待單元測試完成
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backtest_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "ci-cache"
        workspaces: ". -> target"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev postgresql-client

    - name: Setup database
      env:
        PGPASSWORD: postgres
      run: |
        echo "Creating TimescaleDB extension..."
        psql -h localhost -U postgres -d backtest_server_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
        echo "TimescaleDB extension created successfully"
        psql -h localhost -U postgres -d backtest_server_test -c "SELECT * FROM pg_extension WHERE extname = 'timescaledb';"
    
    - name: Install sqlx-cli
      run: |
        if ! command -v sqlx &> /dev/null; then
          echo "Installing sqlx-cli from binary release..."
          curl -L https://github.com/launchbadge/sqlx/releases/download/v0.8.2/sqlx-cli-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv sqlx /usr/local/bin/
          sqlx --version
        else
          echo "sqlx-cli already installed"
        fi
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        RUST_LOG: sqlx=debug,backtest_server=debug
        PGPASSWORD: postgres
      run: |
        echo "Running migrations..."
        sqlx migrate run || (echo "Migration failed!" && exit 1)
        echo "Verifying continuous aggregates..."
        psql -h localhost -U postgres -d backtest_server_test -c "\dv" || true

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/backtest_server_test
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
        RUST_LOG: debug
      run: cargo test --test '*' -- --test-threads=1